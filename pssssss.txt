package com.java.test.dao.impl;

import java.sql.Timestamp;
import java.util.Random;

import org.hibernate.Query;
import org.hibernate.Session;
import org.hibernate.Transaction;
import com.java.test.dao.PharmacyDao;
import com.java.test.model.Pharmacy;
import com.java.test.model.PharmacyOTP;
import com.java.test.model.Purpose;
import com.java.test.model.Status;
import com.java.test.util.MailSend;
import com.java.test.util.SessionHelper;

public class PharmacyDaoImpl implements PharmacyDao {

    Session session;

    public int generateOtp() {
        return 100000 + new Random().nextInt(900000);
    }

    public static String getNextPharmacyId(Session session) {
        String prefix = "PHM";
        String hql = "select max(pharmacyId) from Pharmacy";
        String maxId = (String) session.createQuery(hql).uniqueResult();
        if (maxId == null) {
            return prefix + "001";
        }
        int id = Integer.parseInt(maxId.substring(prefix.length()));
        id++;
        return String.format("%s%03d", prefix, id);
    }

    @Override
    public String addPharmacy(Pharmacy pharmacy) {
        session = SessionHelper.getConnection().openSession();
        Transaction trans = session.beginTransaction();

        String nextId = getNextPharmacyId(session);
        pharmacy.setPharmacyId(nextId);
        pharmacy.setStatus("Pending");
        session.save(pharmacy);
        trans.commit();
        int code = generateOtp();
        Timestamp now = new Timestamp(System.currentTimeMillis());
        Timestamp expiry = new Timestamp(now.getTime() + 10 * 60 * 1000);

        PharmacyOTP otp = new PharmacyOTP();
        otp.setOtpCode(String.valueOf(code));
        otp.setStatus(Status.PENDING);
        otp.setPurpose(Purpose.REGISTER);
        otp.setPharmacyId(pharmacy.getPharmacyId());
        otp.setCreatedAt(now);
        otp.setExpiresAt(expiry);

        trans = session.beginTransaction();
        session.save(otp);
        trans.commit();

        String subject = "Hi " + pharmacy.getPharmacyName() + ", your account is created";
        String body = "Your OTP Code is " + code + ". Please use this to set your password.";
        MailSend.sendInfo(pharmacy.getEmail(), subject, body);

        return "Pharmacy record added and OTP sent via email.";
    }

    public String getAlphaNumericString() {
        String AlphaNumericString = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789abcdefghijklmnopqrstuvxyz";
        StringBuilder sb = new StringBuilder(10);
        for (int i = 0; i < 10; i++) {
            int index = (int) (AlphaNumericString.length() * Math.random());
            sb.append(AlphaNumericString.charAt(index));
        }
        return sb.toString();
    }

    @Override
    public String generatePassword(String email, int otp) {
        session = SessionHelper.getConnection().openSession();
        Query pharmacyQuery = session.createQuery("from Pharmacy where email = :email");
        pharmacyQuery.setParameter("email", email);
        Pharmacy pharmacy = (Pharmacy) pharmacyQuery.uniqueResult();

        if (pharmacy == null) {
            return "No pharmacy found with the provided email.";
        }

        String hql = "from PharmacyOTP where pharmacyId = :pharmacyId and otpCode = :otp and status = :status";
        Query query = session.createQuery(hql);
        query.setParameter("pharmacyId", pharmacy.getPharmacyId());
        query.setParameter("otp", String.valueOf(otp));
        query.setParameter("status", Status.PENDING);

        PharmacyOTP objOtp = (PharmacyOTP) query.uniqueResult();

        if (objOtp != null) {
            String pwd = getAlphaNumericString();
            objOtp.setStatus(Status.VERIFIED);
            objOtp.setNewPassword(pwd);

            Transaction trans = session.beginTransaction();
            session.update(objOtp);
            trans.commit();

            String body = "Your One-Time Password for Login is: " + pwd;
            MailSend.sendInfo(email, "One Time Password", body);

            return "OTP verified. New password has been sent to your email.";
        }

        return "Invalid OTP or email.";
    }

    @Override
    public boolean validatePassword(String email, String password) {
        session = SessionHelper.getConnection().openSession();
        Query query = session.createQuery("from Pharmacy where email = :email");
        query.setParameter("email", email);
        Pharmacy pharmacy = (Pharmacy) query.uniqueResult();

        return pharmacy != null && pharmacy.getPassword().equals(password);
    }

    public boolean validateTempPassword(String email, String password) {
        session = SessionHelper.getConnection().openSession();

        Query pharmacyQuery = session.createQuery("from Pharmacy where email = :email");
        pharmacyQuery.setParameter("email", email);
        Pharmacy pharmacy = (Pharmacy) pharmacyQuery.uniqueResult();

        if (pharmacy == null) return false;

        Query otpQuery = session.createQuery("from PharmacyOTP where pharmacyId = :pharmacyId and status = :status");
        otpQuery.setParameter("pharmacyId", pharmacy.getPharmacyId());
        otpQuery.setParameter("status", Status.VERIFIED);

        PharmacyOTP otp = (PharmacyOTP) otpQuery.uniqueResult();

        return otp != null && otp.getNewPassword().equals(password);
    }

    @Override
    public String updatePassword(String email, String pwd) {
        session = SessionHelper.getConnection().openSession();
        Transaction tx = null;

        String hql = "from Pharmacy where email = :email";
        Query query = session.createQuery(hql);
        query.setParameter("email", email);
        Pharmacy pharmacy = (Pharmacy) query.uniqueResult();

        if (pharmacy != null) {
            tx = session.beginTransaction();
            pharmacy.setPassword(pwd);
            session.update(pharmacy);

            Query otpQuery = session.createQuery("from PharmacyOTP where pharmacyId = :pharmacyId");
            otpQuery.setParameter("pharmacyId", pharmacy.getPharmacyId());
            PharmacyOTP otp = (PharmacyOTP) otpQuery.uniqueResult();

            if (otp != null) {
                session.delete(otp);
            }

            tx.commit();
            return "Pharmacy Updated Successfully";
        } else {
            return "No Pharmacy Found for Update";
        }
    }

    public Pharmacy getPharmacyByEmail(String email) {
        session = SessionHelper.getConnection().openSession();
        Query query = session.createQuery("from Pharmacy where email = :email");
        query.setParameter("email", email);
        return (Pharmacy) query.uniqueResult();
    }
}





package com.java.test.controller;

import javax.faces.application.FacesMessage;
import javax.faces.context.FacesContext;


import com.java.test.dao.impl.PharmacyDaoImpl;
import com.java.test.model.Pharmacy;
import com.java.test.model.PharmacyOTP;

public class PharmacyController {

	private PharmacyDaoImpl pharmacyDao;
	private Pharmacy pharmacy;
	private PharmacyOTP pharmacyOTP;
	
	public PharmacyOTP getPharmacyOTP() {
		return pharmacyOTP;
	}
	public void setPharmacyOTP(PharmacyOTP pharmacyOTP) {
		this.pharmacyOTP = pharmacyOTP;
	}
	public PharmacyDaoImpl getPharmacyDao() {
		return pharmacyDao;
	}
	public void setPharmacyDao(PharmacyDaoImpl pharmacyDao) {
		this.pharmacyDao = pharmacyDao;
	}
	public Pharmacy getPharmacy() {
		return pharmacy;
	}
	public void setPharmacy(Pharmacy pharmacy) {
		this.pharmacy = pharmacy;
	}
	
	public String registerPharmacy() {
	    String result = pharmacyDao.addPharmacy(pharmacy);
	    FacesContext.getCurrentInstance().addMessage(null,
	        new FacesMessage(FacesMessage.SEVERITY_INFO, result, null));
	    return "otp.jsf?faces-redirect=true";
	}

	
//	public String validateLogin() {
//	    String email = pharmacy.getEmail();
//	    String password = pharmacy.getPassword();
//
//	    if (pharmacyDao.validatePassword(email, password)) {
//	        return "home.jsf?faces-redirect=true";
//	    }
//
//	    if (pharmacyDao.validateTempPassword(email, password)) {
//	        return "resetPassword.jsf?faces-redirect=true";
//	    }
//
//	    FacesContext.getCurrentInstance().addMessage(null,
//	        new FacesMessage(FacesMessage.SEVERITY_ERROR, "Invalid credentials", null));
//	    return null;
//	}

	public String validateLogin() {
	    String email = pharmacy.getEmail();
	    String password = pharmacy.getPassword();

	    if (pharmacyDao.validatePassword(email, password)) {
	        Pharmacy found = pharmacyDao.getPharmacyByEmail(email);

	        if (!"Active".equalsIgnoreCase(found.getStatus())) {
	            FacesContext.getCurrentInstance().addMessage(null,
	                new FacesMessage(FacesMessage.SEVERITY_WARN,
	                    "Account not activated. Please wait for admin approval.", null));
	            return null;
	        }

	        return "home.jsf?faces-redirect=true";
	    }

	    if (pharmacyDao.validateTempPassword(email, password)) {
	        return "login.jsf?faces-redirect=true";
	    }

	    FacesContext.getCurrentInstance().addMessage(null,
	        new FacesMessage(FacesMessage.SEVERITY_ERROR, "Invalid credentials", null));
	    return null;
	}

	
	public String validateTempPassword() {
	    String email = pharmacy.getEmail();
	    String password = pharmacy.getPassword();

	    boolean isValid = pharmacyDao.validateTempPassword(email, password);

	    if (isValid) {
	        return "resetPassword.jsf?faces-redirect=true";
	    } else {
	        FacesContext.getCurrentInstance().addMessage(null,
	            new FacesMessage(FacesMessage.SEVERITY_ERROR, "Invalid password. Please check your email.", null));
	        return null;
	    }
	}



//	public String generatePassword(String email, int otp) {
//	     pharmacyDao.generatePassword(email, otp);
//	     return "validatePass.jsf?faces-redirect=true";
//	}
//	
	
	public String generatePassword(String email, int otp) {
	    String result = pharmacyDao.generatePassword(email, otp);

	    if (result.contains("OTP verified")) {
	        return "validatePass.jsf?faces-redirect=true";
	    } else {
	        FacesContext.getCurrentInstance().addMessage(null,
	            new FacesMessage(FacesMessage.SEVERITY_ERROR, result, null));
	        return null;
	    }
	}

	
//	public String updatePassword(String email, String pwd) {
//		return pharmacyDao.updatePassword(email, pwd);
//	}
	public String updatePassword(String email, String pwd) {
	    String result = pharmacyDao.updatePassword(email, pwd);
	    if ("Pharmacy Updated Successfully".equals(result)) {
	        // Redirect to login page after successful password update
	        return "login.jsf?faces-redirect=true";
	    } else {
	        FacesContext.getCurrentInstance().addMessage(null,
	            new FacesMessage(FacesMessage.SEVERITY_ERROR, result, null));
	        // Stay on resetPassword page on failure
	        return null;
	    }
	}

}




//otp................................


<%@ taglib uri="http://java.sun.com/jsf/core" prefix="f" %>
<%@ taglib uri="http://java.sun.com/jsf/html" prefix="h" %>

<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Verify OTP</title>
<link rel="stylesheet" type="text/css" href="${pageContext.request.contextPath}/css/otp.css" />
</head>
<body>

<f:view>
    <h:form>
        <div class="form-container">

            <h:messages globalOnly="true" layout="table" style = ""/>

            <div class="form-group">
                <h:outputLabel for="email" value="Email ID:" styleClass="form-label" />
                <h:inputText id="email" value="#{controller.pharmacy.email}" styleClass="form-input" />
            </div>

            <div class="form-group">
                <h:outputLabel for="otp" value="OTP:" styleClass="form-label" />
                <h:inputText id="otp" value="#{controller.pharmacyOTP.otpCode}" styleClass="form-input" />
            </div>

            <div class="form-group">
                <h:commandButton value="Submit OTP" action="#{controller.generatePassword(controller.pharmacy.email, controller.pharmacyOTP.otpCode)}" styleClass="submit-button" />
            </div>
         

        </div>
    </h:form>
</f:view>

</body>
</html>



<%@ page language="java" contentType="text/html; charset=ISO-8859-1"
    pageEncoding="ISO-8859-1"%>
<%@ taglib uri="http://java.sun.com/jsf/core" prefix="f" %>
<%@ taglib uri="http://java.sun.com/jsf/html" prefix="h" %>

<f:view>
<!DOCTYPE html>
<html>
<head>
    <meta charset="ISO-8859-1">
    <title>Reset Password</title>
    <link rel="stylesheet" type="text/css" href="css/validatePass.css" />
</head>
<body>
    <h:form>
        <div class="form-container">

            <h2>Reset Your Password</h2>

            <!-- Email input -->
            <div class="form-group">
                <h:outputLabel for="email" value="Email Id:" styleClass="form-label" />
                <h:inputText id="email" value="#{controller.pharmacy.email}" required="true" styleClass="form-input" />
            </div>

            <!-- New Password -->
            <div class="form-group">
                <h:outputLabel for="newPassword" value="New Password:" styleClass="form-label" />
                <h:inputSecret id="newPassword" value="#{controller.pharmacy.password}" required="true" styleClass="form-input" />
            </div>

            <!-- Confirm New Password -->
            <div class="form-group">
                <h:outputLabel for="confirmPassword" value="Confirm Password:" styleClass="form-label" />
                <h:inputSecret id="confirmPassword" value="#{controller.pharmacy.password}" required="true" styleClass="form-input" />
            </div>

            <!-- Submit Button -->
            <div class="form-group">
                <h:commandButton value="Update Password" action="#{controller.updatePassword(controller.pharmacy.email, controller.pharmacy.password)}" styleClass="submit-button" />
            </div>

            <!-- Message Display -->
            <h:messages globalOnly="true" style="color:red;" />

        </div>
    </h:form>
</body>
</html>
</f:view>


package com.java.test.dao;

import com.java.test.model.Pharmacy;

public interface PharmacyDao {

	String addPharmacy(Pharmacy pharmacy);
	
	String generatePassword(String email , int otp);
	
	boolean validatePassword(String email, String password);
	
	String updatePassword(String email, String pwd);
	public boolean validateTempPassword(String email, String password);
}
